rm(list = ls())
# Relevant directories --------------------------------------------------------
project_dir <- "C:/git/covid-19/"
output_dir <- paste0(project_dir, "output_data/")
download_dir <- paste0(project_dir, "downloaded_data/")
rm(list = ls())
# Relevant directories --------------------------------------------------------
project_dir <- "C:/git/covid-19/"
output_dir <- paste0(project_dir, "output_data/")
download_dir <- paste0(project_dir, "downloaded_data/")
source(paste0(project_dir, "code/source_stitch.R"))
names(case_time_series)
View(raw_data)
# Relevant libraries ----------------------------------------------------------
library(tidyverse)
raw_data
head(raw_data)
View(raw_data)
glimpse(raw_data)
tail(case_time_series)
View(raw_data3)
summary(raw_data$`State code`)
summary(factor(raw_data$`State code`))
# Maharashtra -----------------------------------------------------------------
mh <- raw_data %>% filter(`State code` == "MH")
View(mh)
order(mh$`Patient Number`)
order(mh$`Patient Number`) == 1:nrow(mh)
sum(order(mh$`Patient Number`) == 1:nrow(mh))
# Maharashtra -----------------------------------------------------------------
mh <- raw_data %>% filter(`State code` == "MH") %>% order_by(`Patient Number`)
# Maharashtra -----------------------------------------------------------------
mh <- raw_data %>% filter(`State code` == "MH") %>% order_by(`Date Announced`)
sapply(mh, class)
# Maharashtra -----------------------------------------------------------------
mh <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`))
View(mh)
# Maharashtra -----------------------------------------------------------------
mh <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>%
order_by(`Patient Number`)
# Maharashtra -----------------------------------------------------------------
mh <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>%
order_by(`Patient Number`)
# Maharashtra -----------------------------------------------------------------
mh <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>% order_by(`Patient Number`)
?order_by
cumsum(1:10)
order_by(10:1, cumsum(1:10))
# Maharashtra -----------------------------------------------------------------
mh <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>% arrange(`Patient Number`)
View(mh)
summary(mh$`Age Bracket`)
class(mh$`Age Bracket`)
cass(mh$`Date Announced`)
class(mh$`Date Announced`)
class(mh$`Status Change Date`)
View(state_wise)
View(state_wise)
View(state_wise_daily)
sapply(raw_data, class)
View(raw_data)
names(raw_data)
data.frame(variable = names(raw_data), class = class(sapply(raw_data, class)))
summary(raw_data$Entry_ID)
class(raw_data$Entry_ID)
class(raw_data$`Num cases`)
class(raw_data$`Num Cases`)
class(raw_data$`Status Change Date`)
grep("date", names(raw_data))
grep("Date", names(raw_data))
raw_data[, grep("Date", names(raw_data))]
as.Date(raw_data[, grep("Date", names(raw_data))])
sapply(raw_data[, grep("Date", names(raw_data))], as.Date)
sapply(raw_data[, grep("Date", names(raw_data))], function(x) as.Date(as.character(x)))
dmy(raw_data[,3])
class(dmy(raw_data[,3]))
names(raw_data)[grep("Date", names(raw_data))]
date_cols <- names(raw_data)[grep("Date", names(raw_data))]
raw_data %>% mutate_at(date_cols, lubridate::dmy)
# Load relevant libraries -----------------------------------------------------
library(stringr)
library(data.table)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(visreg)
library(lubridate)
# Relevant directories --------------------------------------------------------
project_dir <- "C:/git/covid-19/"
output_dir <- paste0(project_dir, "output_data/")
download_dir <- paste0(project_dir, "downloaded_data/")
# =============================================================================
# COVID 19-India API: A volunteer-driven, crowdsourced database
# for COVID-19 stats & patient tracing in India
# =============================================================================
url <- "https://api.covid19india.org/csv/"
# List out all CSV files to source --------------------------------------------
html <- paste(readLines(url), collapse="\n")
pattern <- "https://api.covid19india.org/csv/latest/.*csv"
matched <- unlist(str_match_all(string = html, pattern = pattern))
# Downloading the Data --------------------------------------------------------
covid_datasets <- lapply(as.list(matched), fread)
# Naming the data objects appropriately ---------------------------------------
exclude_chars <- "https://api.covid19india.org/csv/latest/"
dataset_names <- substr(x = matched,
start = 1 + nchar(exclude_chars),
stop = nchar(matched)- nchar(".csv"))
# assigning variable names
for(i in seq_along(dataset_names)){
assign(dataset_names[i], covid_datasets[[i]])
}
# Up to this point we have sourced all our data
# =============================================================================
# Some stitching is required because the data are in chunks
# =============================================================================
# Convert the 3 patient level datasets from data.table to data.frame
raw_data1 <- as.data.frame(raw_data1)
raw_data2 <- as.data.frame(raw_data2)
raw_data3 <- as.data.frame(raw_data3)
# save column names for each patient level dataset
data1_names <- names(raw_data1)
data2_names <- names(raw_data2)
data3_names <- names(raw_data3)
# =============================================================================
#              YOU WANT THE UNION OF ALL COLUMNS IN EACH DATASET
# =============================================================================
# union of column names of all 3 datasets
all_column_names <- base::union(data1_names,
base::union(data2_names, data3_names))
# Replacing variables missing from each dataset with NA
if(length(setdiff(all_column_names, data1_names)) != 0){
raw_data1[, setdiff(all_column_names, data1_names)] <- NA
}
if(length(setdiff(all_column_names, data2_names)) != 0){
raw_data2[, setdiff(all_column_names, data2_names)] <- NA
}
if(length(setdiff(all_column_names, data3_names) !=0)){
raw_data3[, setdiff(all_column_names, data3_names)] <- NA
}
# Rearranging order of dataset variables such that they are the same
raw_data2 <- raw_data2[ , match(names(raw_data2), names(raw_data1))]
raw_data3 <- raw_data3[ , match(names(raw_data3), names(raw_data1))]
# =============================================================================
#                            BIND THE DATA TOGETHER
# =============================================================================
raw_data <- rbind(raw_data1, raw_data2, raw_data3)
# ENSURE DATES ARE IN THE DATE FORMAT AND NOT CHARACHTER ----------------------
# data.frame(variable = names(raw_data), class = class(sapply(raw_data, class)))
date_cols <- names(raw_data)[grep("Date", names(raw_data))]
raw_data <- raw_data %>% mutate_at(date_cols, lubridate::dmy)
# =============================================================================
# Dates in the CASE TIME SERIES data are messed up
# case_time_series dataset
# =============================================================================
# Convert date in "dd Month" character format to Date objects with lubridate
case_ts_dates <- case_time_series$Date
# substrings corresponding to date and month
date_chars <- substr(case_ts_dates, start = 1, stop = 2)
month_chars <- substr(case_ts_dates, start = 4, stop = 6)
# transform Date variable into an easily readable format
case_time_series$Date <-
lubridate::dmy(paste0(date_chars, "-", month_chars, "-2020"))
###############################################################################
############              THAT'S ALL FOLKS!                 ###################
###############################################################################
# Relevant libraries ----------------------------------------------------------
library(tidyverse)
# Relevant directories --------------------------------------------------------
project_dir <- "C:/git/covid-19/"
output_dir <- paste0(project_dir, "output_data/")
download_dir <- paste0(project_dir, "downloaded_data/")
# =============================================================================
# Maharashtra
mh_ <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>%
arrange(`Patient Number`)
View(state_wise)
View(state_wise_daily)
View(state_wise_daily)
# =============================================================================
# Maharashtra
mh_raw <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>%
arrange(`Patient Number`)
View(mh_raw)
sapply(mh_raw, class)
sum(is.na(mh_raw$`Type of transmission`))
raw_data
# State Patient Number needs to be numeric ------------------------------------
numer_cols <- names(raw_data)[grep("Number", names(raw_data))]
numer_cols
sapply(raw_data[,numer_cols], class)
raw_data <- raw_data %>% mutate_at(numer_cols, as.numeric)
View(raw_data)
# =============================================================================
# Maharashtra
# =============================================================================
mh_raw <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>%
arrange(`Patient Number`)
rm(mh_)
rm(mh)
mh_daily <- state_wise_daily %>% select(MH)
View(mh_daily)
mh_daily <- state_wise_daily %>% select(Date, Status, MH)
View(mh_daily)
mh_ts <- state_wise_daily %>% select(Date, Status, MH)
mh_confirmed <- mh_ts %>% filter(Status == "Confirmed")
mh_recovered <- mh_ts %>% filter(Status == "Recovered")
mh_deceased <- mh_ts %>% filter(Status == "Deceased")
View(mh_daily)
rm(mh_daily)
View(mh_confirmed)
plot(mh_confirmed$MH, type = "l")
plot(hist(mh_raw$`Age Bracket`, na.rm = T))
plot(hist(na.omit(mh_raw$`Age Bracket`)))
# Age Bracket has to be Numeric -----------------------------------------------
raw_data$`Age Bracket`
# Age Bracket has to be Numeric -----------------------------------------------
raw_data$`Age Bracket` <- as.numeric(raw_data$`Age Bracket`)
# =============================================================================
# Maharashtra
# =============================================================================
mh_raw <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>%
arrange(`Patient Number`)
mh_ts <- state_wise_daily %>% select(Date, Status, MH)
mh_confirmed <- mh_ts %>% filter(Status == "Confirmed")
mh_recovered <- mh_ts %>% filter(Status == "Recovered")
mh_deceased <- mh_ts %>% filter(Status == "Deceased")
plot(hist(na.omit(mh_raw$`Age Bracket`)))
plot(hist(na.omit(mh_raw$`Age Bracket`), breaks = 100))
mh_deceased <- mh_ts %>% filter(Status == "Deceased")
View(mh_ts)
View(mh_confirmed)
mh_ts$Date
class(mh_ts$Date)
as.Date(state_wise_daily$Date)
dmy(state_wise_daily$Date)
View(state_wise)
# =============================================================================
# Dates in the STATE WISE DAILY data are strings
# state_wise_daily
# =============================================================================
state_wise_daily$Date <- lubridate::dmy(state_wise_daily)
# =============================================================================
# Dates in the STATE WISE DAILY data are strings
# state_wise_daily
# =============================================================================
state_wise_daily$Date <- lubridate::dmy(state_wise_daily$Date)
View(state_wise_daily)
# =============================================================================
# Maharashtra
# =============================================================================
mh_raw <- raw_data %>% filter(`State code` == "MH" & !is.na(`Patient Number`)) %>%
arrange(`Patient Number`)
mh_ts <- state_wise_daily %>% select(Date, Status, MH)
mh_confirmed <- mh_ts %>% filter(Status == "Confirmed")
mh_recovered <- mh_ts %>% filter(Status == "Recovered")
mh_deceased <- mh_ts %>% filter(Status == "Deceased")
unique(state_wise_daily$Date)
seq(1,10,2)
conf_idx <- seq(1, nrow(state_wise_daily), 3)
conf_idx
confirmed_idx <- seq(1, nrow(state_wise_daily), 3)
recovered_idx <- seq(2, nrow(state_wise_daily), 3)
deceased_idx <- seq(3, nrow(state_wise_daily), 3)
View(state_wise_daily)
# =============================================================================
# Maharashtra
# =============================================================================
state_code <- "MH"
mh_raw <- raw_data %>% filter(`State code` == state_code & !is.na(`Patient Number`)) %>%
arrange(`Patient Number`)
col_idx <- which(names(state_wise_daily) == state_code)
col_idx
state_wise_daily[ , col_idx][confirmed_idx]
state_wise_daily[ , col_idx]
state_wise_daily[ , col_idx, with  = F]
state_wise_daily[ , col_idx, with  = F][confirmed_idx]
state_wise_daily[confirmed_idx, col_idx, with  = F]
df <- data.frame(Date = unique(state_wise_daily$Date),
Confirmed = state_wise_daily[confirmed_idx, col_idx, with  = F],
Recovered = state_wise_daily[recovered_idx, col_idx, with = F],
Deceased = state_wise_daily[deceased_idx, col_idx, with = F])
View(df)
state_wise_daily <- as.data.frame(state_wise_daily)
confirmed_idx <- seq(1, nrow(state_wise_daily), 3)
recovered_idx <- seq(2, nrow(state_wise_daily), 3)
deceased_idx <- seq(3, nrow(state_wise_daily), 3)
View(state_wise_daily)
col_idx <- which(names(state_wise_daily) == state_code)
df <- data.frame(Date = unique(state_wise_daily$Date),
Confirmed = state_wise_daily[confirmed_idx, col_idx],
Recovered = state_wise_daily[recovered_idx, col_idx],
Deceased = state_wise_daily[deceased_idx, col_idx])
View(df)
df$TotalConfirmed
df$Confirmed
cumsum(df$Confirmed)
View(state_wise)
df$totalConfirmed <- cumsum(df$Confirmed)
df$totaRecovered <- cumsum(df$Recovered)
df$totalDeceased <- cumsum(df$Deceased)
View(df)
plot(df$totalDeceased / df$totalConfirmed, type = "l")
plot(df$totalDeceased / (df$totalDeceased + df$totaRecovered), type = "l")
df <- data.frame(Date = unique(state_wise_daily$Date),
Confirmed = state_wise_daily[confirmed_idx, col_idx],
Recovered = state_wise_daily[recovered_idx, col_idx],
Deceased = state_wise_daily[deceased_idx, col_idx])
df$Active <- cumsum(df$Confirmed) - cumsum(df$Recovered) - cumsum(df$Deceased)
df$`Total Confirmed` <- cumsum(df$Confirmed)
df$`Total Recovered` <- cumsum(df$Recovered)
df$`Total Deceased` <- cumsum(df$Deceased)
View(df)
